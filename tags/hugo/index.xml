<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on 许 文 的 小 站</title>
    <link>https://shilaAtGit.github.io.git/tags/hugo/</link>
    <description>Recent content in hugo on 许 文 的 小 站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 18 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shilaAtGit.github.io.git/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习使用MarkDown笔记</title>
      <link>https://shilaAtGit.github.io.git/posts/studymarkdown/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/studymarkdown/</guid>
      <description>写一篇笔记，记录markdown的编写办法，以便遗忘时复阅。注：文中资源、命令有时限性，需要依时更新之。&#xA;开篇语&#xA;markdwon是一种暂时流行的文本编辑方式，本文也是用这个格式进行编写的。&#xA;优点是语法简单，可以比较容易的翻译成为HTML文档进行网页展示，所以用来写个人的blog非常方便。&#xA;hugo也是用md文档来生成网页的。&#xA;图片语法&#xA;基础的图片嵌入：&#xA;使用Shortcodes，可以设置图片的一些属性&#xA;链接语法&#xA;参考shortcodes 。 常用参考:&#xA;使用 Markdown 制作 ppt&#xA;使用mermaid为Markdown增加表格&#xA;粗体&#xA;通过用**包含，进行粗体。&#xA;斜体&#xA;通过用*包含，进行斜体。&#xA;标题&#xA;一级标题用#开头。&#xA;二级标题用##开头，二级标题会生成目录，一级不会。&#xA;代码块&#xA;分别用&amp;quot;```&amp;ldquo;首位包含的会展示位代码块。&#xA;如何使用图表&#xA;图表的使用必须使用插件，通过md的插件实现各种功能。我使用mermaid来实现饼图的展示。&#xA;1、在项目的layouts路径下新建/partials/mermaid.html文件，内容如下：&#xA;{{ if .Params.mermaid }} &amp;lt;script src=&amp;#34;/js/mermaid.min.js&amp;#34; integrity=&amp;#34;sha256-KqisLh8jVMBRjpNkOhH5W9VWs+F6x6vQksLqxs7+x9A=&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; &amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(&amp;#34;language-mermaid&amp;#34;)).forEach( (el) =&amp;gt; { el.parentElement.outerHTML = `&amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt;${el.innerText}&amp;lt;/div&amp;gt;`; } ); &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; /* Set svg to center */ .mermaid svg { display: block; margin: auto; } &amp;lt;/style&amp;gt; {{ end }} 2、在同级目录下放入mermaid.</description>
    </item>
    <item>
      <title>学习使用hugo笔记</title>
      <link>https://shilaAtGit.github.io.git/posts/studyhugo/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/studyhugo/</guid>
      <description>写一篇笔记，记录hugo的学习过程，以便遗忘时复阅。注：文中资源、命令有时限性，需要依时更新之。&#xA;开篇语&#xA;hugo是基于go语言的快速搭建网站的框架，然而实现目标——搭建网站——却不需要有任何go语言的学习过程。&#xA;需要的能力是：下载能力，命令行输入命令能力，阅读Doc能力，这些基础能力具备后，只要会写MD格式的网站内容文件就可以了。&#xA;因此，hugo是搭建个人网站最优的方案，因为即使是code大神——为了记录信息才是核心目标，也完全没必要自己去费时建设。&#xA;hugo主页：hugo&#xA;准备工作：&#xA;安装git（本来就有）&#xA;安装brew（很久以前的工具，无法升级，为了修复它话费了大量的时间）&#xA;安装hugo（有了brew一切都很容易）&#xA;第一步：修复homebrew&#xA;1、输入brew update报错，尝试各种百度方法，最后卡在提示ruby版本与操作系统不符合，表现为更新ruby失败，手动更新后提示操作系统版本旧。因为我无法升级操作系统，所以困住于此。&#xA;2、使用如下方法，修复&#xA;命令： /bin/zsh -c “$(-fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)”&#xA;命令会引导命令终端进入交互模式，都选1-中科大镜像，即可。 完成brew的完整安装后，输入brew update进行升级。&#xA;第二步：安装go&#xA;go有自己的可视化安装包，下载并安装即可。&#xA;第三步：安装hugo&#xA;命令：brew install hugo&#xA;参考安装hugo&#xA;第四步：生成项目并启动服务&#xA;hugo new site quickstart //建立一个叫做quickstart的项目，可以用任意名称&#xA;cd quickstart //进入项目根目录&#xA;git init //初始化git&#xA;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke //下载ananke theme&#xA;echo &amp;ldquo;theme = &amp;lsquo;ananke&amp;rsquo;&amp;rdquo; &amp;raquo; hugo.toml //启用theme&#xA;hugo server //启动服务，日志输出中会显示服务地址http://localhost:1313 操作非常简单，至此就完成了整个网站的建设。具体可以参考官网搭建hogo项目&#xA;第五步：更换喜欢的theme&#xA;hugo提供很多的theme，可以根据目标选择。参考themes&#xA;1、下载theme，并放到项目的themes目录下，参考语句：git clone https://github.com/vimux/mainroad.git themes/mainroad&#xA;2、更新hugo.toml，在项目根目录找到 theme = &amp;lsquo;ananke&amp;rsquo;，修改为theme = &amp;lsquo;mainroad&amp;rsquo;</description>
    </item>
    <item>
      <title>学习theme-mainroad的记录</title>
      <link>https://shilaAtGit.github.io.git/bolg/studytheme/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/bolg/studytheme/</guid>
      <description>记录一下学习theme的过程，先学习的是自己使用的mainroad。&#xA;mainroad是hugo的众多theme中的一个，比较适合简单使用，写自己的blog。&#xA;首先，先贴一下hugo的主页：&#xA;hugo主页&#xA;从hugo主页的菜单themes主页进入，可以选择自己喜欢的theme，每个theme都有详细的自己的下载、使用教程。使用教程的主要内容为config和front matter。&#xA;其中，对于config的配置，新版本的hugo已经放到了hugo.toml中，不在放在config下，也可以自己新建config目录和config.toml文件存放，但是没啥必要。&#xA;theme主要的定制能力，都体现在front matter上。front matter的定义，是一个theme的样式。比如在我的所有md文档中，都要复制mainroad提供的frontmatter到文件头。&#xA;front matter的内容提供了定制，可以自己根据需求进行调整。比如页面包涵那些模块，模块的摆放位置等。&#xA;front matter的形式用&amp;quot;- - -&amp;ldquo;上下包涵，放在md文档的头部。</description>
    </item>
    <item>
      <title>使用git搭建免费个人主页</title>
      <link>https://shilaAtGit.github.io.git/usegitbuildpages/usegitbuildpersonalpage/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/usegitbuildpages/usegitbuildpersonalpage/</guid>
      <description>作为一个程序员，当然要有自己的主页，使用hugo是非常方便的方式.&#xA;具体如何进行hugo项目搭建，参考我另外一篇文章。学习使用hugo笔记&#xA;完成了个人主页的搭建，就需要有一个互联网地址，能够实现public的访问，比如允许朋友查看，分享什么。本文介绍如何使用github来搭建一个免费的个人主页。&#xA;开篇语&#xA;github是不太稳定的，有的时候无法访问，如果个人愿意出钱，可以选择其他的云服务，比如阿里云、腾讯云、华为云等，这些付费的专业云可以获得比较好的用户体验。&#xA;本文主导的是免费的策略，顺带熟悉github的发布。&#xA;github之前被墙过，但是现在基本是允许访问的，一些教你翻墙、hosts设置代理等访问git的方式，可以先放弃了。如果后期github再次被墙了，需要寻找相应的访问办法。&#xA;申请github账号：&#xA;参考申请github账户&#xA;第二步：配置本地git&#xA;参考配置本地的github的SSH&#xA;第三步：推送本地代码到github&#xA;1、要根据发布地址，生成hugo最终发布的代码。使用hugo命令可以生成发布代码，并放入项目下的public目录。这里要指定发布地址，否则后续修改比较麻烦。&#xA;在项目根目录下执行命令： hugo &amp;ndash;baseURL=https://shilaAtGit.github.io.git&#xA;URL=后面的内容，就是之前在git账户申请过程中，新建的仓库的https地址，根据之前新建的规则，地址为：https://&amp;lt;你的github账号&amp;gt;.github.io&#xA;命令执行后，会在项目根目录下生成一个public目录&#xA;1.1、这里要格外注意： 把自己不想发布的文件夹先删除再执行上面的生成过程（生成并推送之后可以再从垃圾站里找回来）&#xA;2、进入public目录：cd public&#xA;3、逐一执行以下命令：&#xA;git init //每次修改了代码重新生成public后，都要从这里开始执行&#xA;git remote add origin git@github.com:shilaAtGit/shilaAtGit.github.io.git&#xA;git add .&#xA;git commit -m &amp;ldquo;提交说明&amp;rdquo;&#xA;git push -f origin main //也许需要加 -f，因为是个人开发，所以直接强制把本地的代码更新到远端。 很多教程在这里push的是master，也会教你如何从main改为master，但是去掉master是官方行为，用main挺好不影响使用。&#xA;这里也许会网络错误，毕竟git经常被墙，重试一下也许就好了。&#xA;4、这样就完成了push到远端github，需要稍微等一会才能访问。网络墙也许会给你带来困惑，比如我的网络可以访问github的管理页面，但是无法访问我自己的主页，就很奇怪。&#xA;提供一些参考的git语句：&#xA;git pull origin main&#xA;git branch -l&#xA;git remote add origin git@github.com:shilaAtGit/shilaAtGit.github.io.git&#xA;第四步：发布和重新发布&#xA;很多时候会发现自己的发布并没有成功，那就需要重新发布，在github管理界面操作即可。&#xA;1、登陆github账户，进入项目&#xA;2、选择actions&#xA;3、选择一个workflow进入&#xA;4、点击reRun&#xA;5、观察如下，就是发布成功了&#xA;终章，搞定啦&#xA;至此，一个免费的基于github服务的个人主页就完成了，剩下的就是根据hugo来进行MD格式内容的编写了。</description>
    </item>
    <item>
      <title>我的第一个hugo blog</title>
      <link>https://shilaAtGit.github.io.git/posts/first/</link>
      <pubDate>Sat, 15 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/first/</guid>
      <description>学习使用新技术重新搭建个人blog，迁移存量内容到新技术下。</description>
    </item>
  </channel>
</rss>
