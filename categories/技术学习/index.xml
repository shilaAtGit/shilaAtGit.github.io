<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术学习 on 许 文 的 小 站</title>
    <link>https://shilaAtGit.github.io.git/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 技术学习 on 许 文 的 小 站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 13 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shilaAtGit.github.io.git/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《数字化转型架构》阅读笔记</title>
      <link>https://shilaAtGit.github.io.git/works/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BD%AC%E5%9E%8B/</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/%E6%95%B0%E5%AD%97%E5%8C%96%E8%BD%AC%E5%9E%8B/</guid>
      <description>公司以数字化转型为核心动力，作为唯一的技术部门，要把数字化转型的工作研究一下。&#xA;学习书籍，记录心得。&#xA;数字化转型的背景 线上线下的边界越来越模糊；人群、产品、场景在数字化的影响下越来越同质化。&#xA;市场的竞争，不再以产品质量竞争为中心，而转移为客户服务和客户触达的竞争。产品已经大差不差了。&#xA;看似技术问题的数字化转型，其实是企业架构转型的延伸。只是因为技术的壁垒，使得只能由技术人员来逆向主导。&#xA;数字化转型的目标 1、以客户服务为中心，以触达为途径，而不再是以产品为核心了。所以不转型的公司未来只能死。&#xA;2、大数据分析反哺业务规则制定，强化以客户服务为中心；智能化改进生产流程，降低触达成本；数字化和云，让研发跟上市场。&#xA;3、架构转型是数字化转型的抓手。企业架构先改，然后是技术架构按照企业架构进行改造。&#xA;4、架构改了，才可以着手进行数据转型和it技术转型。&#xA;企业架构设计 1、企业架构的本质，是企业地图，描述了组织的结构和工作方式，指导了业务和技术变更的路线规划。&#xA;2、企业架构框架，是如何描述企业架构的一种方法论，是一种模型，照着这个模型，把模糊的企业状况，分解和梳理为企业架构。&#xA;3、企业架构内容包括：业务架构、应用架构、数据架构、技术架构。&#xA;4、企业架构方法论，包括4个部分：企业战略计划、企业架构规划、项目实施管理、架构运营治理。方法论为企业架构的内容增加了战略指引，项目和运营。&#xA;5、企业战略分为：业务战略和技术战略。业务战略通过业务架构来落实，技术战略通过应用架构、数据架构、技术架构来落实。&#xA;6、企业架构的现状和演进方向，是企业当前战略转化成具体项目的重要依据。&#xA;7、业务架构阐述企业的业务能力、业务流程、业务逻辑；应用架构阐述领域分析、功能识别、服务分析；数据架构关注数据模型和数据分布；技术架构描述技术选型和技术体系（研发体系和运维体系）。&#xA;8、业务能力和业务流程，加上数据价值，是企业的核心资产。&#xA;9、组织适配改造，是数字化转型坚持到成功的护卫。&#xA;业务架构设计 1、业务架构的关键要素：商业模式、价值链、业务能力、业务流程、业务平台、组织架构。&#xA;2、商业模式核心组成：创造价值、传递价值、获得价值。&#xA;3、价值链分析是获得企业盈利方向和成本部门的方法。&#xA;4、业务能力的分析，自上而下需要强力领导支持，否则容易有部门墙；自下而上耗时多，而且容易自吹自擂；上下双向管理成本高；业务能力要关注对错，而不是关注谁做。&#xA;5、把业务能力组合起来，实现场景业务目标，就是业务流程；把业务流程拆分，形成公共能力和专属能力，就是业务能力；业务能力和业务流程共同决定了组织架构。&#xA;6、业务架构设计的方法很经典，看书。&#xA;应用架构设计 1、应用架构的核心是建模，才能把业务层面的能力和流程，转化为系统层面的服务与应用。&#xA;2、应用架构的发展顺序：集中式架构、分布式架构、事件架构、微服务、云原生。&#xA;3、应用架构设计的核心方法论：领域驱动设计。一般划分为：核心域、通用域、支撑域。&#xA;4、领域驱动设计的几个价值观：抽象、无状态、自治、幂等、最终一致性、&#xA;5、应用架构与产品，以及解决方案是完全不同的东西，后者是商业的内容，采用商业活动（如营销）来展开。但是应用架构为他们提供支撑能力，并被其影响而变更。&#xA;数据架构设计 1、数据架构设计的核心是数据模型、数据分布和数据治理（标准化）。&#xA;2、数据模型的来源是领域设计，领域模型和相应的服务抽象形成数据模型。&#xA;3、最终一致性是数据分布的重要标准。&#xA;4、多种类型数据库并用的业务诉求，促进了数据的分类和分层，进一步推动了数据API的发展。&#xA;技术架构治理 1、技术架构的表现形式是架构制图，是IT系统的技术标准、原则和最佳实践。&#xA;2、技术架构的主要关注点：流量调度、服务治理、监控体系、消息队列、微服务框架。&#xA;3、技术架构从公司角度是业务架构的支撑，重点是业务功能和业务流程；从技术部门角度，非功能性指标才是价值所在。&#xA;云原生架构 1、云原生的终极目标其实是函数托管，由云提供托管环境，函数/代码由开发人员开发后提交到云，由云负责运行和管理。实现方式可以参考flink的算子模式。&#xA;2、上云（不一定是云原生了）后的应用，交付从代码包变为镜像。以此为标志，云原生的改造，背后是软件研发模式和企业IT架构的变革。&#xA;3、云上常用的基础服务：日志分析、流量管理、健康检查、优雅关机、自我修复、弹性伸缩、API模式的存储、密钥管理、状态统一管理、参数统一管理、持续集成、持续部署、&#xA;4、云的优势：可观测性、可编排性、环境稳定性（容器模版都一样）、&#xA;云原生实践 1、一个重要理念：一切都是资源。&#xA;2、资源的编排：事件、阶段、状态、钩子。</description>
    </item>
    <item>
      <title>学习使用MarkDown笔记</title>
      <link>https://shilaAtGit.github.io.git/posts/studymarkdown/</link>
      <pubDate>Tue, 18 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/studymarkdown/</guid>
      <description>写一篇笔记，记录markdown的编写办法，以便遗忘时复阅。注：文中资源、命令有时限性，需要依时更新之。&#xA;开篇语&#xA;markdwon是一种暂时流行的文本编辑方式，本文也是用这个格式进行编写的。&#xA;优点是语法简单，可以比较容易的翻译成为HTML文档进行网页展示，所以用来写个人的blog非常方便。&#xA;hugo也是用md文档来生成网页的。&#xA;图片语法&#xA;基础的图片嵌入：&#xA;使用Shortcodes，可以设置图片的一些属性&#xA;链接语法&#xA;参考shortcodes 。 常用参考:&#xA;使用 Markdown 制作 ppt&#xA;使用mermaid为Markdown增加表格&#xA;粗体&#xA;通过用**包含，进行粗体。&#xA;斜体&#xA;通过用*包含，进行斜体。&#xA;标题&#xA;一级标题用#开头。&#xA;二级标题用##开头，二级标题会生成目录，一级不会。&#xA;代码块&#xA;分别用&amp;quot;```&amp;ldquo;首位包含的会展示位代码块。&#xA;如何使用图表&#xA;图表的使用必须使用插件，通过md的插件实现各种功能。我使用mermaid来实现饼图的展示。&#xA;1、在项目的layouts路径下新建/partials/mermaid.html文件，内容如下：&#xA;{{ if .Params.mermaid }} &amp;lt;script src=&amp;#34;/js/mermaid.min.js&amp;#34; integrity=&amp;#34;sha256-KqisLh8jVMBRjpNkOhH5W9VWs+F6x6vQksLqxs7+x9A=&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; &amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(&amp;#34;language-mermaid&amp;#34;)).forEach( (el) =&amp;gt; { el.parentElement.outerHTML = `&amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt;${el.innerText}&amp;lt;/div&amp;gt;`; } ); &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; /* Set svg to center */ .mermaid svg { display: block; margin: auto; } &amp;lt;/style&amp;gt; {{ end }} 2、在同级目录下放入mermaid.</description>
    </item>
    <item>
      <title>flink的使用方法</title>
      <link>https://shilaAtGit.github.io.git/works/workflow/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/workflow/</guid>
      <description>记录在网上学到的flink的比较好的应用 flink实时计算平台整体架构 1、flink可以用来处理多种实时数据，最典型的就是业务数据分析、用户行为日志分析、实时位置相关的计算。&#xA;业务数据分析：金额/笔数的实时统计计算、业务指标完成情况、&#xA;用户行为分析：根据日志分析风险、黄牛侦测&#xA;位置计算：实时跟踪位置推荐商圈、&#xA;2、不要过于依赖flink自身的数据采集功能，应该使用kafka、pulsar等消息中间件来实现复杂的数据采集、数据输出。&#xA;3、可视化平台，在风险侦测、业务指标警示等方面，是非常重要的。&#xA;4、规则计算的配置化+数据实时产品的流式输出的配置化是业务高效上线的关键。&#xA;数据处理流程 1、要通过Metrics等监控工具，来管理数据源的延迟情况。&#xA;2、实时计算过程中，要使用到大量的参数，比如特征匹配值、过滤规则，这些参数很多还是在可视化平台实时配置的，需要考虑存储方案。&#xA;3、实时产品中，要细分出内部实时产品和外部实时产品，典型外部场景是营销触达。&#xA;4、flink state是很重要的工具。&#xA;运维 1、海量的数据源，要有延迟监控。&#xA;2、内外部用户的权限管控，要单独实现。实现的内容要包含：数据可见性管控、脱敏诉求、加密需求。&#xA;3、新增或者增强的flink作业的安全、性能管理。&#xA;4、失败管理和应急方案，checkpoint恢复的及时性和安全性。</description>
    </item>
    <item>
      <title>流式计算</title>
      <link>https://shilaAtGit.github.io.git/works/flink/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/flink/</guid>
      <description>流式计算的基本概念和基本常识 基本概念 流式计算&#xA;一种实时计算。一个场景就是计算机系统实时的产生不断增加的交易数据，这些交易数据需要每增加一笔就进行一次计算——比如求平均金额——并展示给用户。&#xA;流式计算从交易处理系统不断的获得交易数据，每获得一条就进行一次计算并记录计算结果，这就是流式计算的初期目的。&#xA;不同于批量运算，流式计算的实时性要高很多。&#xA;flink&#xA;flink是一个流式计算的容器/框架，独立部署运行，可以类比为apache或者jboss，应用可以发布在flink集群中，完成业务数据处理诉求。&#xA;spark&#xA;spark是一个分布式计算框架，基于分布式数据存储的分布式计算模型。&#xA;kafka&#xA;kafka是一个消息中间件。意思就是支持拉取（订阅）或者接收（被推送）上游数据到kafka集群，然后被拉取（被订阅）或者推送数据到下游的系统。&#xA;pulsar pulsar就是一个先进版的kafka，定位和功能都类似。在无需深度使用的场景下了解到这个地步就行了。&#xA;基本常识 flink&#xA;flink逻辑上简单来说包含三个部分，数据获取、数据处理、数据输出。&#xA;一般来说，flink的数据获取和数据输出都是标准模式的，比如从mysql获取数据、从kafka获取/输出数据，用的都是flink开发者提供的简朴的配置化的clint服务即可实现。flink也不支持在这2个部分进行个性化开发。&#xA;flink的数据处理是高度个性化的。一般是由业务诉求方开发个性化的代码来实现数据处理。&#xA;kafka&#xA;kafka的一个价值在于简便的实现一些异步的操作，即上游把可以异步处理的数据通过标准方法（kafka标准）丢给kafka，下游系统去订阅并处理。</description>
    </item>
    <item>
      <title>mysql的距离函数使用</title>
      <link>https://shilaAtGit.github.io.git/works/mysql-location/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/mysql-location/</guid>
      <description>记录一下mysql的point类型数据以及ST_Distance_sphere函数 GIS简介 在很多购物场景，需要根据商店的坐标，计算与当前客户的距离，这是一种基本服务，通常被称为LBS（Location Based Service）。而LBS的核心技术实现，叫做GIS（Geographic Information System）。&#xA;技术实现上，通常使用支持此类运算的数据库如mongoDB，针对特殊的业务需求还需要有特殊的技术架构。&#xA;但是，实际开发中，使用mysql的应用系统较多，切换数据库代价很大。在服务要求不高的场景下，可以使用mysql的GIS特性来实现。&#xA;POINT 数据类型 mysql 可以定义POINT数据类型存储坐标信息。在定义表字段的时候直接使用即可。&#xA;CREATE TABLE test_table( id INT PRIMARY KEY AUTO_INCREMENT, point_type_colum POINT ); 空间索引 针对POINT类型的字段，要建立空间索引SPATIAL INDEX以提高查询速度。&#xA;ALTER TABLE test_table ADD SPATIAL INDEX (point_type_colum); 查询 查询的时候要用到ST_Distance_sphere函数&#xA;SELECT id,ST_Distance_sphere(point_type_colum,POINT(1,1))AS distanceDouble FROM test_table ORDER BY distanceDouble ASC LIMIT 0, 5; 写在最后 永远不要忘了通过explain来检查sql是否使用上了索引&#xA;还有一句 还有一种纯数学的距离计算方法，叫做geohash。&#xA;通过纯纯的数学计算，将二维的坐标信息，转化为二进式数字并进行base编码。通过比较数字不同的位数，确定距离的远近。&#xA;距离的计算可以通过编写数据库存储过程来实现，这里会用到GEOMFROMTEXT内置函数。&#xA;具体可以参考：&#xA;Geohash原理&#xA;存储过程计算Geohash</description>
    </item>
    <item>
      <title>mysql的join如何优化性能</title>
      <link>https://shilaAtGit.github.io.git/works/mysql-join/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/mysql-join/</guid>
      <description>记录一下mysql的join是如何工作的以及性能调优的基本原理 join简介 联表查询经常要用到join，join是编程简化的需求，但是对于数据库的操作来说，增加了很多的复杂度和性能消耗，需要谨慎使用。&#xA;inner join：根据关联关系on，只返回on上匹配的数据&#xA;left join：根据条件查询主表（即左表）的全部符合条件数据数据，然后根据on的关系，补充符合on的附表（即右表）的数据，返回。&#xA;right join：与left join相反。&#xA;join 基本流程 现在有t1和t2两张表，idx是两张表的连接字段，并且都进行了索引。 执行的操作如下： 第一步：从表t1 读出一行数据ROW&#xA;第二步：从数据行中取出字段idx 到表t2 中去查找&#xA;第三步：在t2 中筛选出满足条件的行，跟t1 读出的数据ROW组装，构成结果集的一行&#xA;重复步骤一、二、三步，直到t1 全部查完&#xA;第一步优化 这里有第一个优化点，在第一步中，从表 t1读出一行数据ROW ，在MYSQL5.6的时候，启用了BKA（Batched Key Access）算法，批量数据查询，由原先的每次读取一行数据变为查询出一批数据，去被驱动表进行匹配。&#xA;这种优化的必须要解决的问题就是一次查出的数据放在哪里，MYSQL单独开辟了一个内存，你一定听过，就是join_buffer 。这样就能够，缓存住批量的数据，减少t1的读取频率。原先的JOIN流程就变成了 第二步优化 众所周知，在上述流程中，一般索引检索到匹配的值时候，会再去主键索引找到具体的数据，这个过程被我们称为回表。如果回表的扫描过程中，是顺序的，那么依据磁盘的读写特性，将大大的提高效率，这也是第二个优化点Multi-Range Read（MRR）。&#xA;MRR在一般索引匹配到主键索引的时候，单独开辟了一个空间read_rnd_buffer 对主键索引先进行排序，使得主键索引查找顺序的时候，是尽可能的顺序查找。MRR的加入使得原先的JOIN流程变成了： MRR的read_rnd_buffer的大小是由参数read_rnd_buffer_size 控制的&#xA;MRR默认是关闭的，MYSQL优化器更加倾向于不使用MRR，因此set optimizer_switch=&amp;ldquo;mrr_cost_based=off&amp;rdquo; 开启MRR&#xA;BKA算法的主要性能优化是基于MRR的，因此set optimizer_switch=&amp;lsquo;mrr=on,mrr_cost_based=off,batched_key_access=on&amp;rsquo;; 是开启BKA的正确姿势&#xA;MRR的优化前提是BKA，也就是说有多主键的范围查询&#xA;写在最后 以上的理论分析，需要经过具体的测试验证才可以使用，比如缓存大小具体设置的数值、是否涉及到冷表等。 理论分析可以直接使用，但是重点是思路，这个思路要善于灵活运用，比如是否通过redis等高速存储变相实现理论</description>
    </item>
    <item>
      <title>学习使用hugo笔记</title>
      <link>https://shilaAtGit.github.io.git/posts/studyhugo/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/studyhugo/</guid>
      <description>写一篇笔记，记录hugo的学习过程，以便遗忘时复阅。注：文中资源、命令有时限性，需要依时更新之。&#xA;开篇语&#xA;hugo是基于go语言的快速搭建网站的框架，然而实现目标——搭建网站——却不需要有任何go语言的学习过程。&#xA;需要的能力是：下载能力，命令行输入命令能力，阅读Doc能力，这些基础能力具备后，只要会写MD格式的网站内容文件就可以了。&#xA;因此，hugo是搭建个人网站最优的方案，因为即使是code大神——为了记录信息才是核心目标，也完全没必要自己去费时建设。&#xA;hugo主页：hugo&#xA;准备工作：&#xA;安装git（本来就有）&#xA;安装brew（很久以前的工具，无法升级，为了修复它话费了大量的时间）&#xA;安装hugo（有了brew一切都很容易）&#xA;第一步：修复homebrew&#xA;1、输入brew update报错，尝试各种百度方法，最后卡在提示ruby版本与操作系统不符合，表现为更新ruby失败，手动更新后提示操作系统版本旧。因为我无法升级操作系统，所以困住于此。&#xA;2、使用如下方法，修复&#xA;命令： /bin/zsh -c “$(-fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)”&#xA;命令会引导命令终端进入交互模式，都选1-中科大镜像，即可。 完成brew的完整安装后，输入brew update进行升级。&#xA;第二步：安装go&#xA;go有自己的可视化安装包，下载并安装即可。&#xA;第三步：安装hugo&#xA;命令：brew install hugo&#xA;参考安装hugo&#xA;第四步：生成项目并启动服务&#xA;hugo new site quickstart //建立一个叫做quickstart的项目，可以用任意名称&#xA;cd quickstart //进入项目根目录&#xA;git init //初始化git&#xA;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke //下载ananke theme&#xA;echo &amp;ldquo;theme = &amp;lsquo;ananke&amp;rsquo;&amp;rdquo; &amp;raquo; hugo.toml //启用theme&#xA;hugo server //启动服务，日志输出中会显示服务地址http://localhost:1313 操作非常简单，至此就完成了整个网站的建设。具体可以参考官网搭建hogo项目&#xA;第五步：更换喜欢的theme&#xA;hugo提供很多的theme，可以根据目标选择。参考themes&#xA;1、下载theme，并放到项目的themes目录下，参考语句：git clone https://github.com/vimux/mainroad.git themes/mainroad&#xA;2、更新hugo.toml，在项目根目录找到 theme = &amp;lsquo;ananke&amp;rsquo;，修改为theme = &amp;lsquo;mainroad&amp;rsquo;</description>
    </item>
    <item>
      <title>学习theme-mainroad的记录</title>
      <link>https://shilaAtGit.github.io.git/bolg/studytheme/</link>
      <pubDate>Wed, 28 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/bolg/studytheme/</guid>
      <description>记录一下学习theme的过程，先学习的是自己使用的mainroad。&#xA;mainroad是hugo的众多theme中的一个，比较适合简单使用，写自己的blog。&#xA;首先，先贴一下hugo的主页：&#xA;hugo主页&#xA;从hugo主页的菜单themes主页进入，可以选择自己喜欢的theme，每个theme都有详细的自己的下载、使用教程。使用教程的主要内容为config和front matter。&#xA;其中，对于config的配置，新版本的hugo已经放到了hugo.toml中，不在放在config下，也可以自己新建config目录和config.toml文件存放，但是没啥必要。&#xA;theme主要的定制能力，都体现在front matter上。front matter的定义，是一个theme的样式。比如在我的所有md文档中，都要复制mainroad提供的frontmatter到文件头。&#xA;front matter的内容提供了定制，可以自己根据需求进行调整。比如页面包涵那些模块，模块的摆放位置等。&#xA;front matter的形式用&amp;quot;- - -&amp;ldquo;上下包涵，放在md文档的头部。</description>
    </item>
    <item>
      <title>使用git搭建免费个人主页</title>
      <link>https://shilaAtGit.github.io.git/usegitbuildpages/usegitbuildpersonalpage/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/usegitbuildpages/usegitbuildpersonalpage/</guid>
      <description>作为一个程序员，当然要有自己的主页，使用hugo是非常方便的方式.&#xA;具体如何进行hugo项目搭建，参考我另外一篇文章。学习使用hugo笔记&#xA;完成了个人主页的搭建，就需要有一个互联网地址，能够实现public的访问，比如允许朋友查看，分享什么。本文介绍如何使用github来搭建一个免费的个人主页。&#xA;开篇语&#xA;github是不太稳定的，有的时候无法访问，如果个人愿意出钱，可以选择其他的云服务，比如阿里云、腾讯云、华为云等，这些付费的专业云可以获得比较好的用户体验。&#xA;本文主导的是免费的策略，顺带熟悉github的发布。&#xA;github之前被墙过，但是现在基本是允许访问的，一些教你翻墙、hosts设置代理等访问git的方式，可以先放弃了。如果后期github再次被墙了，需要寻找相应的访问办法。&#xA;申请github账号：&#xA;参考申请github账户&#xA;第二步：配置本地git&#xA;参考配置本地的github的SSH&#xA;第三步：推送本地代码到github&#xA;1、要根据发布地址，生成hugo最终发布的代码。使用hugo命令可以生成发布代码，并放入项目下的public目录。这里要指定发布地址，否则后续修改比较麻烦。&#xA;在项目根目录下执行命令： hugo &amp;ndash;baseURL=https://shilaAtGit.github.io.git&#xA;URL=后面的内容，就是之前在git账户申请过程中，新建的仓库的https地址，根据之前新建的规则，地址为：https://&amp;lt;你的github账号&amp;gt;.github.io&#xA;命令执行后，会在项目根目录下生成一个public目录&#xA;1.1、这里要格外注意： 把自己不想发布的文件夹先删除再执行上面的生成过程（生成并推送之后可以再从垃圾站里找回来）&#xA;2、进入public目录：cd public&#xA;3、逐一执行以下命令：&#xA;git init //每次修改了代码重新生成public后，都要从这里开始执行&#xA;git remote add origin git@github.com:shilaAtGit/shilaAtGit.github.io.git&#xA;git add .&#xA;git commit -m &amp;ldquo;提交说明&amp;rdquo;&#xA;git push -f origin main //也许需要加 -f，因为是个人开发，所以直接强制把本地的代码更新到远端。 很多教程在这里push的是master，也会教你如何从main改为master，但是去掉master是官方行为，用main挺好不影响使用。&#xA;这里也许会网络错误，毕竟git经常被墙，重试一下也许就好了。&#xA;4、这样就完成了push到远端github，需要稍微等一会才能访问。网络墙也许会给你带来困惑，比如我的网络可以访问github的管理页面，但是无法访问我自己的主页，就很奇怪。&#xA;提供一些参考的git语句：&#xA;git pull origin main&#xA;git branch -l&#xA;git remote add origin git@github.com:shilaAtGit/shilaAtGit.github.io.git&#xA;第四步：发布和重新发布&#xA;很多时候会发现自己的发布并没有成功，那就需要重新发布，在github管理界面操作即可。&#xA;1、登陆github账户，进入项目&#xA;2、选择actions&#xA;3、选择一个workflow进入&#xA;4、点击reRun&#xA;5、观察如下，就是发布成功了&#xA;终章，搞定啦&#xA;至此，一个免费的基于github服务的个人主页就完成了，剩下的就是根据hugo来进行MD格式内容的编写了。</description>
    </item>
    <item>
      <title>申请github账户</title>
      <link>https://shilaAtGit.github.io.git/usegitbuildpages/applygithub/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/usegitbuildpages/applygithub/</guid>
      <description>介绍一下如何实现github的账户申请，以及在github上建立第一个仓库。 这个仓库后续要用来发布个人主页，个人主页的搭建可以参考我另外一篇文章。学习使用hugo笔记。&#xA;开篇语&#xA;github是不太稳定的，有的时候无法访问，如果个人愿意出钱，可以选择其他的云服务，比如阿里云、腾讯云、华为云等，这些付费的专业云可以获得比较好的用户体验。&#xA;本文主导的是免费的策略，顺带熟悉github的发布。&#xA;github之前被墙过，但是现在基本是允许访问的，一些教你翻墙、hosts设置代理等访问git的方式，可以先放弃了。如果后期github再次被墙了，需要寻找相应的访问办法。&#xA;申请github账号：&#xA;如果有账号直接登录就好了。&#xA;gitlab的平台界面和操作路径会更新，所以有的时候需要自己找一下操作位置。&#xA;访问gitlab，点击右上角的sign up。&#xA;然后填写注册信息就好了，注册信息很简单，包括email，用户名，口令。后续页面会收集其他信息，以及推荐选择付费版本，记住选择免费即可。&#xA;第一步：新建github仓库&#xA;1、登陆在gitlab，点击左侧的new按键，新建一个repository。&#xA;2、填写新的仓库的信息，注意不要修改任何信息，需要填写的只有Repository Name.&#xA;Name不能乱写，必须是.github.io，比如我的github的名字叫zhangsan123，Repository Name就是zhangsan123.github.io。&#xA;另外，不要因为前面就是owner，就不写owner了&#xA;就此，github仓库就创建好了，后面只需要将本地代码提交到这个仓库就可以了。</description>
    </item>
    <item>
      <title>配置本地的github的SSH</title>
      <link>https://shilaAtGit.github.io.git/usegitbuildpages/gensshkey/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/usegitbuildpages/gensshkey/</guid>
      <description>简单讲解一下如何生成本地的ssh key，并配置到github账户，以实现本地代码推送到远端。&#xA;不配置这一步，是无法通过命令行推送代码的。&#xA;配置本地git&#xA;配置本地的git环境，才能将本地代码提交到github，这里讲如何通过命令行进行提交的准备工作。&#xA;一、生成ssh key&#xA;git提交，需要与远程仓库通过ssh安全通道进行提交，所以要先生成本地的ssh key，并且配置到服务器，才可以实现提交。&#xA;1、生成本地ssh key。 这里“你的邮箱”，指的是你注册github时候使用的邮箱&#xA;ssh-keygen -t rsa -C &amp;ldquo;你的邮箱&amp;rdquo;&#xA;生成过程中，会提示输入密码等一系列操作，全部用回车即可。&#xA;2、执行 ssh -v git@github.com&#xA;3、执行 ssh-agent -s&#xA;4、执行 ssh-add ~/.ssh/id_rsa&#xA;这个时候出现的Identity added&amp;hellip;这里的路径就是证书文件路径&#xA;5、打开证书文件路径，找到id_rsa.pub文件，用文本阅读器打开，看到ssh-rsa开头的一段base64公钥，全文复制 。&#xA;二、配置ssh key&#xA;1、浏览器登录到你的github账号，点击右侧头像，选择settings&#xA;2、在settings中选择SSH and GPG keys&#xA;3、选择New SSH key&#xA;4、把刚才复制的公钥复制到key的文本框中，title可以随便起一个，完成后点击Add SSH key&#xA;至此，就完成了ssh key的配置，可以验证一下，在命令行输入： ssh -T git@github.com</description>
    </item>
    <item>
      <title>GITC全球互联网大会</title>
      <link>https://shilaAtGit.github.io.git/news/gitc/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/news/gitc/</guid>
      <description>GITC是全球互联网技术大会，18年有北京站大会。有机会以公司的名义参加学习，很是幸运。&#xA;网址：http://www.thegitc.com/index.html</description>
    </item>
    <item>
      <title>如何设置github代理地址</title>
      <link>https://shilaAtGit.github.io.git/sethosts/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/sethosts/</guid>
      <description>作为国人在研发中一个痛点就是无法自由使用很多全球资源，一些公司提供相应的解决方案，但是一些公司因为性质问题不能提供，只能由程序员自行解决。&#xA;如何访问guihub就是其中一个。方法目前比较靠谱的就是如下，以本人mac系统为例进行阐述：&#xA;1、首先，即使使用代理，github也是不太稳定的，这个只能忍了。&#xA;2、可用的github代理经常会发生变化，所以及时更新很重要。&#xA;3、访问https://raw.hellogithub.com/hosts，用浏览器打开此地址即可下载文件，用本地文本工具打开，即可看到最新的github相关的代理地址。&#xA;4、更新本地的hosts文件，mac的文件位置在：/etc/hosts.&#xA;5、修改hosts文件需要管理员口令，有的工具不支持输入管理员口令进行修改，使用sublimeText工具可以编辑。&#xA;6、使hosts的修改生效：sudo killall -HUP mDNSResponder</description>
    </item>
    <item>
      <title>我的第一个hugo blog</title>
      <link>https://shilaAtGit.github.io.git/posts/first/</link>
      <pubDate>Sat, 15 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/posts/first/</guid>
      <description>学习使用新技术重新搭建个人blog，迁移存量内容到新技术下。</description>
    </item>
    <item>
      <title>CFX生成WS客户端</title>
      <link>https://shilaAtGit.github.io.git/works/cfx/</link>
      <pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://shilaAtGit.github.io.git/works/cfx/</guid>
      <description>记录一下如何根据CFX生成web servers的client端代码 WSDL介绍&#xA;WSDL 可描述网络服务（Web Services）&#xA;WSDL 指网络服务描述语言 (Web Services Description Language)。&#xA;WSDL 是一种使用 XML 编写的文档。这种文档可描述某个 Web service。它可规定服务的位置，以及此服务提供的操作（或方法）。&#xA;下载CFX&#xA;下载地址：http://www.apache.org/dyn/closer.cgi?path=/cxf/2.7.11/apache-cxf-2.7.11.zip 将CXF压缩包解压到本地目录&#xA;配置环境变量&#xA;要根据操作系统的不同来配置。&#xA;配置环境变量&#xA;在CLASSPATH %CXF_HOME%\lib 在PATH中添加 %CXF_HOME%\bin 验证环境变量&#xA;验证：命令行输入：&#xA;wsdl2java -v 结果显示：wsdl2java -Apache CXF 2.7.11说明配置成功&#xA;wsdl2java工具使用&#xA;使用命令行输入：&#xA;wsdl2java -frontend jaxws21 -p com.test.client -d D:\ -client -autoNameResolution http://192.168.0.118:8080/framework/ws/helloService?wsdl 说明:&#xA;-p 包名&#xA;-d 文件生成的本地目录&#xA;http://192.168.0.118:8080/framework/ws/helloService?wsdl 发布的服务访问路径&#xA;另外，记录： 以下的方法我没有用过，记录参考，万一用到&#xA;使用本地wsdl文件生成代码&#xA;使用命令行输入：wsdl2java -p com.test.client -d D: -verbose &amp;ldquo;D:\helloService.xml&amp;rdquo;&#xA;说明：-p 包名 -d生成文件路径 -verbose &amp;ldquo;wsdl文件路径&amp;rdquo;</description>
    </item>
  </channel>
</rss>
